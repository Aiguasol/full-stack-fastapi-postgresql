"""first migration

Revision ID: e61c87b3ff6e
Revises: None
Create Date: 2022-05-02 07:46:12.194670

"""


# revision identifiers, used by Alembic.
# template obtained from https://alembic.sqlalchemy.org/en/latest/cookbook.html#conditional-migration-elements

revision = "e61c87b3ff6e"
down_revision = None


import logging
from typing import Any, Optional
from uuid import uuid4

from alembic import context, op
from pydantic import BaseModel
import sqlalchemy as sa
from sqlalchemy import Column, DateTime, Float, ForeignKey, Integer, Numeric, String
from sqlalchemy import Boolean
from sqlalchemy.engine import Connection
from sqlalchemy.ext.declarative import declarative_base, as_declarative, declared_attr
from sqlalchemy.orm import Session, relationship

from sqlalchemy.dialects.postgresql import UUID, JSONB

from app.db.time import utcnow
from app.db.utils import delete_instances, upsert_instances


# ---------------------------------------------------------------------------- #
#                                logging config                                #
# ---------------------------------------------------------------------------- #

logger = logging.getLogger("alembic.runtime.revision")


# ---------------------------------------------------------------------------- #
#                              tables definitions                              #
# ---------------------------------------------------------------------------- #


MigrationBase = declarative_base()


class Item(MigrationBase):

    __tablename__ = "item"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    owner_id = Column(Integer, ForeignKey("user.id"))
    owner = relationship("User", back_populates="items")


class User(MigrationBase):

    __tablename__ = "user"

    id = Column(Integer, primary_key=True, index=True)
    uuid = Column(UUID(as_uuid=True), default=uuid4, unique=True, nullable=False)
    first_name = Column(String, nullable=False)
    last_name = Column(String, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    is_active = Column(Boolean(), default=True)

    time_created_utc = Column(DateTime, server_default=utcnow())
    time_updated_utc = Column(DateTime, onupdate=utcnow())
    last_seen_utc = Column(DateTime, onupdate=utcnow())

    # ------------------------------- relationships ------------------------------ #

    items = relationship("Item", back_populates="owner")
    role_id = Column(Integer, ForeignKey("role.id"), nullable=False)
    role = relationship("Role", back_populates="users")


class Role(MigrationBase):

    __tablename__ = "role"

    id = Column(Integer(), primary_key=True)
    name = Column(String(64), unique=True)
    default = Column(Boolean, default=False, index=True)
    permissions = Column(Integer)

    users = relationship("User", back_populates="role")


# ---------------------------------------------------------------------------- #
#                            migrations definitions                            #
# ---------------------------------------------------------------------------- #


def upgrade():

    bind: Connection = op.get_bind()
    session = Session(bind=bind)

    logger.info("Begin schema upgrades")
    schema_upgrades(session)

    logger.info("Begin data upgrades")
    data_upgrades(session)

    logger.info("Finished upgrades")


def downgrade():

    bind = op.get_bind()
    session = Session(bind=bind)

    logger.info("Begin data downgrades")
    data_downgrades(session)

    logger.info("Begin schema downgrades")
    schema_downgrades(session)

    logger.info("Finished downgrades")


def schema_upgrades(session: Session):
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###

    MigrationBase.metadata.create_all(bind=session.bind)

    # create tables individually alternatively
    # Item.__table__.create(bind=session.bind, checkfirst=True)
    # Role.__table__.create(bind=session.bind, checkfirst=True)
    # User.__table__.create(bind=session.bind, checkfirst=True)
    # ### end Alembic commands ###


def schema_downgrades(session: Session):
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    MigrationBase.metadata.drop_all(bind=session.bind)

    # Item.__table__.drop(bind=session.bind, checkfirst=True)
    # Role.__table__.drop(bind=session.bind, checkfirst=True)
    # User.__table__.drop(bind=session.bind, checkfirst=True)
    # ### end Alembic commands ###


def data_upgrades(session: Session):
    """Add any optional data upgrade migrations here!"""

    pass


def data_downgrades(session: Session):
    """Add any optional data downgrade migrations here!"""
    pass
